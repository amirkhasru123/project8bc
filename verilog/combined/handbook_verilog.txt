$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Code Convention
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

####################
Most of the codes in Verilog remain inside of modules.
	module module_name (port_list);
	endmodule

####################
Port_list might be empty.
	module module_name;
	endmodule

####################
Ports can be of three types: input, output, inout.

####################
Passing data from one module to another module is possible.
	target_module instance_name (.port_target(.port_current));

####################
By default ports are unsigned. Use 'signed' keyword to indicate signed ports.

####################
Every line is terminated with seicolon.
	module module_name(port_lists); //a semicolon
	endmodule

####################
Comment can be written in two ways.
	//single line comments  
	/*multiple
	lines
	comments
	*/

####################
Multiple line comments can't be nested.
	/*
		/*
			Not possible
		*/
	*/

####################
Repeating double slash maintains commenting.
	////This is the same comment.
	////////This is also the same comment.

####################
White spaces (spaces, tabs, newlines, formfeed) are ignored. 
	$display("amir");
	  $display("amir");
   		  $display("amir");

		  $display("amir");

####################
Formfeed (\f) indicates printer output.
	$display("\famir");

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Different Data
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

####################
Like contents (data), like containers (identifiers).

####################
Containers and contents must have the same size. Otherwise data overflow or underflow may happen.
	reg [4*8:1] name = "amir"; //in UNIX, each character is of one byte. "amir" is content and name is container. Size of amir = size of name.

####################
Baseless numbers are decimals. Sizeless numbers match size from data.

####################
To identify the contents, we use special symbols. For string = %s, time / realtime = %t, real = %f. 

####################
For integers, specification depends on base_format.
	[size]'[base_format][number]. 
	For %b = binary, %d = decimal, %o = octal, %h = hexadecimal.

####################
For negative numbers, add '-' sign before size.

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Modifiers
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

####################
We've 12 types of Nets
	wire = multiple driver issue 
	uwire = single driver ensured 

	tri = multiple drivers, default = z, conflict = x 

	wor = multiple drivers ored together
	wand = multiple drivers anded together 

	trior = tri, but conflict = ored together 
	triand = tri, but conflict = anded together
	tri0 = tri, default = 0 
	tri1 = tri, default = 1 

	supply0 = ground, constant
	supply1 = voltage reference to ground, constant

	trireg = not supported by iverilog

##################
We've 5 types of identifiers.
	reg
	integer
	time 
	real
	realtime

####################
We've 10 types of net strength.
	supply1, supply0, strong1, strong0, weak1, weak0, pull0, pull1, highz0, highz1

	Power table: supply, strong, pull, weak, highz

	1 = true/up
	0 = false/down

	assign (strength1,strength0) net = expression;

####################
Verilog Parameters ar like C constants.
	parameter name = value;

	3 types of parameters.
	Module
		Can be modified in function instance.
	Local
		Can't be modified in function instance.
		But can express it with other var, then the var can change.
	Specify
		specify
			//code
		endspecify

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

####################
Scalar & Vector
	1 bit container is net.
	Multiple bit net is vector.

	We can perform operation directly to a bit.
	[a:b] can be used to part select.

####################
Verilog Array
	An array declaration of a net or variable can be either scalar or vector.
	Like multidimensional arry in C.

	type range array_name size_range

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Operators
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

####################
3 types of operators are available in Verilog.
	Unary = left side operators
	+, -, !, ~, &, |, ^, ~&, ~|, ~^, ^~

	Binary = in between operators 
	+, -, *, /, %, **, ==, !=, ===, !==, >, >=, <, <=, &&, ||, &, |, ^, ^~, ~^, <<, >>, <<<, >>>

	Conditional = 3 parts operators
	condition ? one : two;

####################
{} is uded to concatenate and replicate.

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
We have data, operators. So we can perform opertions. Oprations are nothing but process.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

####################
We can fork (pause) and join (resume) process in Verilog.
	fork
		//code
	join

####################
You can also block and not block code.
	= block code
	<= not block code

####################
assign, deassign will assign and deassign a var for reg (inside procedural).

force, release will do same for net and reg.

####################
Procedural blocks must be inside always or initial.
Concurrent blocks assign, generate and module instance don't need always or initial.
	if-else-if
	Just like C. 
	
	for
	Like C.

	forever
	Infinite loop.

	repeat
	Repeat blocks n times.

	while
	Like C.

	case
	Like C.

####################
Verilog gate delay is of 3 types.
	One delay
		#(delay)
	Two delay
		#(rise, fall)
	Three delay
		#(rise, fall, turn-off)	

	Rise delay = 1 from other state	
	Fall delay = 0 from other state
	Turn-off delay = z from other state

	min:typ:max can be used to rise, fall, turn-off

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Functions
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

####################
Functions in Verilog are like functions in C.
	function range name;
		ports;
		begin
			//code
		end
	endfunction

####################
Return type of a function in Verilog can only be wire or reg.
The turn type is not mentioned in the def.
	function [automatic] [return_type] name ([port_list]);
		[statements]
	endfunction

####################
A function can not:
	have any time-controlled statements like #, @, wait, posedge, negedge
	start a task
	have zero input
	have non-blocking assignments or force-release or assign-deassign
	have any triggers
	have an output or inout

####################
keyword automatic will make the function reentrant.It is useful for recursive functions and when the same function is executed concurrently by N processes when forked.

####################
User-defined primitive uses truth table directly.
	0 Logic 0
	1 Logic 1
	x Unknown
	? Logic 0, 1 or x 
	- No change
	ab Change in value from a to b 
	* Same as ??
	r Same as 01 -> rising edge on input 
	f Same as 10 -> falling edge on input 
	p Potential positive edge on input
	n Potential falling edge on input

####################
Special Functions
	$display("text")
	Displays texts with a return.

	$write("text")
	Displays texts wtihout a return.

	$finish
	Finish the command

	Gate Level Functions
	or (out, a, b, ...)
	and (out, a, b, ...)
	not (out, a)
	nor (out, a, b, ...)
	nand(out, a, b, ...)
	xor (out, a, b, ...)
	xnor (out, a, b, ...)

	buf (out, a) //input = output
	bufif1 (out, in, control) //buf, when control=1
	bufif0 (out, in, control) //buff, when control=0	
	notif1 (out, in, control) //not, when control=1 
	notif0 (out, in, control) //not, when control=0

	pmos (out, vdd, pcontrol)
	nmos (out, gnd, ncontrol)
	cmos (out, gnd/vdd, ncontrol, pcontrol)

####################
Verilo Tasks
	What functions can't do, tasks can.
	Task is general version of function.
	A task can be automatic by invocating automatic.

	Tasks can be disabled using the disable keyword.

####################
Verilog Delay Control
	Delay(direct time delay)
		Inter-assignment delay
		#<delay> <LHS> = <RHS>
		Intra-assignment delay
		<LHS> = #<delay> <RHS>
	Event control.
		posedge, negedge	
		Custom control can be set by named events.
		The sensitivity list @(list) can be used to for force delay.
		Level sensitive event control wait can also be used here.


Dictionary of Verilog:
####################
Keywords are of many types in Verilog.

C-like
	if, else, for, while, case, default, include 

Gates
	or, and, not, nor, nand, xor, xnor

Net / Data Type
	integer, real, time, realtime, wire, uwire, tri, tri0, tri1, trior, triand, wor, wand, trireg, reg

Strength
	supply0, supply1, strong0, strong1, pull0, pull1, pullup, pulldown, weak0, weak1

Transistor / signals
	nmos, pmos, rcmos, rnmos, rpmos, cmos, edge, posedge, negedge 

Verilog Only:
function //function in C
inout //input or output port
input //input port
output //output pot

initial //start simulation
always //while in C

begin //beginning of a block 
end //end of a block
endcase, endconfig, endfunction, endgenerate, endmodule, endprimitive, endspecify, endtable, endtask

assign //used for continuous assesment
deassign //deasses an assesment

automatic //recursive function

buf //input = output 
bufif0 //passed through when signal = 0 
bufif1 //passed when signal = 1

//not still known
casex, casez, cell, config,
defparam, design, disable, 
event, force, forever, fork, generate, genvar, ifnone, incdir,instance, join, large, liblist, library, localparam, macromodule, medium, module, notif0, notif1, output, parameter, primitive, pulsestyle_onevent, pulsestyle_ondetect, release, repeat, rtran, rtranif0, rtranif1, scalared, small, specify, specparam, table, task, tran, tranif0, tranif1, use, vectored, wait 
