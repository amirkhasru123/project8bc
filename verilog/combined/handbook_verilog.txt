####################
Most of the codes in Verilog remains inside of modules.
	module module_name(port_lists);
	endmodule

####################
Port_lists can be empty.
	module module_name;
	endmodule

####################
Every line is terminated with seicolon.
	module module_name(port_lists); //a semicolon
	endmodule

####################
Comment can be written in two ways.
	//single line comments  
	/*multiple
	lines
	comments
	*/

####################
Multiple line comments can't be nested.
	/*
		/*
			Not possile
		*/
	*/

####################
Single line comments can be double slashed multiple times.	//This is a comment.
	////This is the same comment.
	////////This is also the same comment.

####################
White spaces (spaces, tabs, newlines, formfeed) are ignored.All the following lines are same.
	$display("amir");
	  $display("amir");
   		  $display("amir");

		  $display("amir");

####################
Formfeed is slash f. It indicates printer output.
	$display("\famir");

####################
Containers contain contents. Like contents (data), like containers (identifiers).

####################
Containers and contents have the same size. Otherwise data overflow or underflow may happen.
	reg [4*8:1] name = "amir"; //in UNIX, each character is of one byte. "amir" is content and name is container. Size of amir = size of name.

####################
To show the contents, we specify its nature. string = %s, time / realtime = %t, real = %f. 

####################
For integers, specification depends on base_format.
	[size]'[base_format][number]. 
	%b = binary, %d = decimal, %o = octal, %h = hexadecimal

####################
For negative number add a '-' sign before size.

####################
Baseless numbers are decimals. Sizeless numbers match size from data.

####################
Keywords are many types in Verilog.

Like C's 
case, default, else, for, if, while, include 

Gates 
and, or, not, xor, xnor, nand, nor

Data Type
integer, real, realtime, reg, time, tri, tri0, tri1, trior, triand, wor, wand, trireg, wire, uwire, trireg

Strength
supply0, supply1, strong0, strong1, pull0, pull1, pullup, pulldown, weak0, weak1

Transistor / signals
nmos, pmos, rcmos, rnmos, rpmos, cmos, edge, posedge, negedge 

Verilog Only:
function //like function in C
inout //input or output
input //input

initial //start simulation
always //like while in C

begin //begin a block 
end //end of a block

assign //used for continuous assesment
deassign //deasses an assesment

automatic //recursive function

buf //input = output 
bufif0 //passed through when signal = 0 
bufif1 //passed when signal = 1

casex, casez, cell, config,
defparam, design, disable, 
end of blocks
endcase, endconfig, endfunction, endgenerate, endmodule, endprimitive, endspecify, endtable, endtask
event, force, forever, fork, generate, genvar, ifnone, incdir,instance 
join, large, liblist, library, localparam, macromodule, medium, module, notif0, notif1, output, parameter, primitive, pulsestyle_onevent, pulsestyle_ondetect, release, repeat, rtran, rtranif0, rtranif1, scalared, small, specify, specparam, table, task, tran, tranif0, tranif1, use, vectored, wait  

We store data to perform some operation on them. We have three types of operatos.

Nets are here: 	
	wire = multiple driver issue 
	uwire = single driver ensured 

	tri = multiple drivers, default = z, conflict = x 

	wor = multiple drivers ored together
	wand = multiple drivers anded together 

	trior = tri, but conflict = ored together 
	triand = tri, but conflict = anded together
	tri0 = tri, default = 0 
	tri1 = tri, default = 1 


	supply0 = ground, constant
	supply1 = voltage reference to ground, constant

	trireg = not supported by iverilog

Variable types: 
	reg
	integer
	time 
	real
	realtime

Scalar & Vector:
	1 bit net
	Multiple bit net is vector

	We can perform operation directly to a bit
	[a:b] can be used to part select

Verilog Array
	An array declaration of a net or variable can be either scalar or vector.
	Like multidimensional arry in C.
	Arrays are allowed in Verilog for reg, wire, integer and real data types.
	type range array_name size_range

Net strength
	assign  (strength1, strength0) net = expression;
	supply1, supply0, strong1, strong0, weak1, weak0, pull0, pull1, highz0, highz1
	1 = true/up
	0 = false/down
	Power chart: supply, strong, pull, weak, highz

Operators
	Unary = left side operators
	+, -, !, ~, &, |, ^, ~&, ~|, ~^, ^~
	Binary = in between operators 
	+, -, *, /, %, **, ==, !=, ===, !==, >, >=, <, <=, &&, ||, &, |, ^, ^~, ~^, <<, >>, <<<, >>>
	Conditional = 3 parts operators
	condition ? one : two;

While simulating we need to pass variable value from module to module. target_module instance_name(.var_target(.var_current))

Module ports can be of three types. input, output, inout

By default, the ports are unsigned. For signed ports use signed keyword.

{} is uded to concatenate and replicate.

$display("text")
	Displays texts with a return.

$write("text")
	Displays texts wtihout a return.

$finish
	finish the command
