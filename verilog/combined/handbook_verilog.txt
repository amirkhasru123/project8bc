$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Code Convention
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

####################
Most of the codes in Verilog remains inside of modules.
	module module_name(port_lists);
	endmodule

####################
Port_lists can be empty.
	module module_name;
	endmodule

#####################
Module ports can be of three types: input, output, inout

#####################
Passing data from module to module is possible.
	target_module instance_name(.port_target(.port_current)

#####################
By default are unsigned. For signed ports use signed keyword.

####################
Every line is terminated with seicolon.
	module module_name(port_lists); //a semicolon
	endmodule

####################
Comment can be written in two ways.
	//single line comments  
	/*multiple
	lines
	comments
	*/

####################
Multiple line comments can't be nested.
	/*
		/*
			Not possile
		*/
	*/

####################
Single line comments can be double slashed multiple times.	//This is a comment.
	////This is the same comment.
	////////This is also the same comment.

####################
White spaces (spaces, tabs, newlines, formfeed) are ignored. All the following lines are same.
	$display("amir");
	  $display("amir");
   		  $display("amir");

		  $display("amir");

####################
Formfeed is slash f. It indicates printer output.
	$display("\famir");

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Different Data
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

####################
Containers contain contents. Like contents (data), like containers (identifiers).

####################
Containers and contents have the same size. Otherwise data overflow or underflow may happen.
	reg [4*8:1] name = "amir"; //in UNIX, each character is of one byte. "amir" is content and name is container. Size of amir = size of name.

####################
To show the contents, we specify its nature. string = %s, time / realtime = %t, real = %f. 

####################
For integers, specification depends on base_format.
	[size]'[base_format][number]. 
	%b = binary, %d = decimal, %o = octal, %h = hexadecimal

####################
For negative number add a '-' sign before size.

####################
Baseless numbers are decimals. Sizeless numbers match size from data.

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Modifiers
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

####################
Many types of Nets
	wire = multiple driver issue 
	uwire = single driver ensured 

	tri = multiple drivers, default = z, conflict = x 

	wor = multiple drivers ored together
	wand = multiple drivers anded together 

	trior = tri, but conflict = ored together 
	triand = tri, but conflict = anded together
	tri0 = tri, default = 0 
	tri1 = tri, default = 1 

	supply0 = ground, constant
	supply1 = voltage reference to ground, constant

	trireg = not supported by iverilog

##################
Many types of variables
	reg
	integer
	time 
	real
	realtime

#####################
Net strength
	assign (strength1,strength0) net = expression;
	supply1, supply0, strong1, strong0, weak1, weak0, pull0, pull1, highz0, highz1
	1 = true/up
	0 = false/down
	Power table: supply, strong, pull, weak, highz

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

#####################
Scalar & Vector
	1 bit container is net
	Multiple bit net is vector

	We can perform operation directly to a bit
	[a:b] can be used to part select

#####################
Verilog Array
	An array declaration of a net or variable can be either scalar or vector.
	Like multidimensional arry in C.
	type range array_name size_range

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Operators
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

#####################
Operators
	Unary = left side operators
	+, -, !, ~, &, |, ^, ~&, ~|, ~^, ^~
	Binary = in between operators 
	+, -, *, /, %, **, ==, !=, ===, !==, >, >=, <, <=, &&, ||, &, |, ^, ^~, ~^, <<, >>, <<<, >>>
	Conditional = 3 parts operators
	condition ? one : two;

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Now verilog has a lot of process going on. we have to control the processes
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

#####################
{} is uded to concatenate and replicate.

#####################
We can fork(pause) and join(resume) process in verilog.
	fork
		//code
	join

#####################
You can also block and not block code.
	= block code
	<= not block code

#####################
Special Functions
	$display("text")
	Displays texts with a return.

	$write("text")
	Displays texts wtihout a return.

	$finish
	Finish the command

####################
Keywords are of many types in Verilog.

C-like
	if, else, for, while, case, default, include 

Gates
	or, and, not, nor, nand, xor, xnor

Net / Data Type
	integer, real, time, realtime, wire, uwire, tri, tri0, tri1, trior, triand, wor, wand, trireg, reg

Strength
	supply0, supply1, strong0, strong1, pull0, pull1, pullup, pulldown, weak0, weak1

Transistor / signals
	nmos, pmos, rcmos, rnmos, rpmos, cmos, edge, posedge, negedge 

Verilog Only:
function //function in C
inout //input or output port
input //input port
output //output pot

initial //start simulation
always //while in C

begin //beginning of a block 
end //end of a block
endcase, endconfig, endfunction, endgenerate, endmodule, endprimitive, endspecify, endtable, endtask

assign //used for continuous assesment
deassign //deasses an assesment

automatic //recursive function

buf //input = output 
bufif0 //passed through when signal = 0 
bufif1 //passed when signal = 1

//not still known
casex, casez, cell, config,
defparam, design, disable, 
event, force, forever, fork, generate, genvar, ifnone, incdir,instance, join, large, liblist, library, localparam, macromodule, medium, module, notif0, notif1, output, parameter, primitive, pulsestyle_onevent, pulsestyle_ondetect, release, repeat, rtran, rtranif0, rtranif1, scalared, small, specify, specparam, table, task, tran, tranif0, tranif1, use, vectored, wait 
